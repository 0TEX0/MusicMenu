---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 0TEX0.
--- DateTime: 11/08/2023 16:54
---

function Music:drawMenu(name, v)
	RageUI.IsVisible(self.mainMenu, function()
		RageUI.Info(self:translate("title_info"), 255, 255, 255,
			{ self:translate("title"), self:translate("music_time"), self:translate("volume") },
			{
				self:getMusicStatus(name),
				self:soundExists(name) and self:formatTime(XSOUND:getMaxDuration(name)) or self:translate("no_music"),
				self:soundExists(name) and self.volume .. "/10" or self:translate("no_music"),
			}
		)
		RageUI.Button(self:translate("play"), nil, { RightLabel = "→→" }, true, {
			onSelected = function()
				local url <const> = self:KeyboardInput(self:translate("input"), '', 20)
				if (url ~= "") then
					self:playSound(name, url, v.coords, v.soundDistance)
				end
			end
		})
		if (self:soundExists(name)) then
			RageUI.Line()
			RageUI.SliderProgress(self:translate("volume"), self.volume, 10, nil, {
				ProgressBackgroundColor = { R = 0, G = 0, B = 0, A = 180 },
				ProgressColor = { R = 200, G = 0, B = 0, A = 225 },
			}, true, {
				onSliderChange = function(value)
					self.volume = value
					XSOUND:setVolume(name, value/10)
				end
			})
			RageUI.Checkbox(self:translate("pause"), nil, self.pause, { Style = RageUI.CheckboxStyle.Tick }, {
				onChecked = function()
					self.pause = true
					XSOUND:Pause(name)
				end,
				onUnChecked = function()
					self.pause = false
					XSOUND:Resume(name)
				end
			})
			RageUI.Button(self:translate("time_stamp"), nil, { RightLabel = "→→" }, true, {
				onActive = function()
					self.sliderPanel.index = XSOUND:getTimeStamp(name)
					self.sliderPanel.minimum = XSOUND:getTimeStamp(name)
				end
			})
			RageUI.Button(self:translate("stop"), nil, { RightBadge = RageUI.BadgeStyle.Alert }, true, {
				onSelected = function()
					XSOUND:Destroy(name)
				end
			})
			RageUI.SliderPanel(self.sliderPanel.index, self.sliderPanel.minimum, self:translate("time_stamp"), XSOUND:getMaxDuration(name), {
				onSliderChange = function(value)
					self.sliderPanel.index = value
					XSOUND:setTimeStamp(name, value)
				end
			},4)
		end
	end)
end

CreateThread(function()
	while ESX.GetPlayerData().job == nil do
		Wait(10)
	end
	while true do
		local sleepThread = 1000
		for key,v in pairs(Config.musicMenuPos) do
			if (Music:isPlayerInJob(v.job)) then
				local pedCoords = GetEntityCoords(PlayerPedId())
				local distance = #(pedCoords - v.coords)
				if (distance < Config.marker.maxDistanceToShow) then
					sleepThread = 0
					DrawMarker(Config.marker.type, v.coords.x, v.coords.y, v.coords.z - 0.98, 0, 0, 0, 0, 0, 0, Config.marker.scale.x, Config.marker.scale.y, Config.marker.scale.z, Config.marker.color.r, Config.marker.color.g, Config.marker.color.b, Config.marker.color.a, false, true, 2, false, false, false, false)
				end
				if (distance < Config.marker.maxDistanceToInteract) then
					if (not Music.mainMenu) then
						ESX.ShowHelpNotification(Music:translate("press_to_open_menu"))
					end
					if (IsControlJustPressed(0, Config.marker.intercationKey)) then
						Music:openMenu(key, v)
					end
				end
			end
		end
		Wait(sleepThread)
	end
end)